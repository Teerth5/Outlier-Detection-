# -*- coding: utf-8 -*-
"""Handling_Outliers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pA8qF8BId2JCgdVRJMv3fXJcoV7BK58a
"""

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'uber-fares-dataset:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F1834623%2F2994100%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240327%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240327T060704Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D3a1a814e5f570f24e77346860934b87df0ba349a01ac309db515a6dd303672cd1d7ca1fa48f6cc48398f349337637728c40647633d1a82a9e73677fcecde8ea34c8d69d69e7409ed5e90df08f5b80ec8351f1ca0382d9188c358b430e9897b7cb7c698be15e2d70c50e4c0ce3108abef554bf1915d670432a243f4f8b1b3d82cf571bc957242acfd28342a471ded3173bd6136e826f4dc595f6a74f37d55dfaf9ff781b308f9d141fbb4242244a4347d88883ab86ed393e2769d2df6381fcefc119bf572504abe40f78a8bdc3969a301074d6802caa63c744b7258488c0ba0ea8682dba3d9b0d90b5d68dbfc0b15a819a641a8125e05a62ce4752b17547455b9'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

"""**Okay so here I am trying to detect outliers present in the data.**"""

data=pd.read_csv("/kaggle/input/uber-fares-dataset/uber.csv")
data.head()

"""**In the below code we are just removing the unnecessary columns from the data to avoid complexity**"""

extracol=["pickup_longitude", "pickup_latitude", "dropoff_longitude", "dropoff_latitude"]
data= data.drop(columns=(extracol))
data.head()

"""**Using the describe method can help us to understand the data more**"""

data.describe()

data.describe()

#CHEKING THE DISTRIBUTION
import plotly.express as px

fig=px.histogram(data,  x="fare_amount")
fig.show()

"""So we can see that the data does not follow the normal distribution . It is left skewed.

So now instead of Z SCORE we have to use Interqartile Range to define the outlier.

So for this purpose we can use **BOX PLOT** to see the max , min range of the data of a specific variable. here **FARE_AMOUNT**

"""

fig2=px.box(data,y="fare_amount")
fig2.show()

"""**MULTIVARIATE ANALYSIS USING *scatter plot***"""

fig3 =px.scatter(x=data["passenger_count"],y=data["fare_amount"])
fig3.show()

"""Statistical way to find the outlier IQR"""

#creating a function to find outliers using IQR

def find_outliers_IQR(df):

   q1=df.quantile(0.25)

   q3=df.quantile(0.75)

   IQR=q3-q1

   outliers = df[((df<(q1-1.5*IQR)) | (df>(q3+1.5*IQR)))]

   return outliers

outliers= find_outliers_IQR(data["fare_amount"])
print("OUTLIERS SUMMARY OF FARE_AMOUNT")
print("Count of outliers: ",len(outliers))
print("Max value is: " ,max(outliers))
print("Min value is: ", min(outliers))
outliers

outliers= find_outliers_IQR(data["passenger_count"])
print("OUTLIERS SUMMARY OF PASSENGER_COUNT")
print("Count of outliers: ",len(outliers))
print("Max value is: " ,max(outliers))
print("Min value is: ", min(outliers))
outliers

"""Techniques we are using  to handle outliers

* Cap the outliers
* Replace outliers using imputation as if they were missing values

**Since the number of the outliers is more so the Dropping off the outliers will affect the overall data**

***Cap the outliers***

*Capping the outliers means setting the max value and min values
so that anything beyond those points will be that points itself.*

**UPPER_LIMIT = df[column].mean()+3*df[column].std()**

**LOWER_LIMIT = df[column].mean()-3*df[column].std()**
"""

upper_limit=data["fare_amount"].mean() + (3*data["fare_amount"].std())
lower_limit=data["fare_amount"].mean()-(3*data["fare_amount"].std())

print("Upper Limit: ", upper_limit)
print("Lower Limit: ",lower_limit)

data["fare_amount"] = np.where(data["fare_amount"] > upper_limit,upper_limit,
                               np.where(data["fare_amount"] < lower_limit,lower_limit,data["fare_amount"] ))

"""**np.where**

Syntax :numpy.where(condition[, x, y])
Parameters:
condition : When True, yield x, otherwise yield y.
x, y : Values from which to choose. x, y and condition need to be broadcastable to some shape.
"""

data["fare_amount"].describe()

upper_limit=data["passenger_count"].mean() + (3*data["passenger_count"].std())
lower_limit=data["passenger_count"].mean()-(3*data["passenger_count"].std())

print("Upper Limit: ", upper_limit)
print("Lower Limit: ",lower_limit)

data["passenger_count"] = np.where(data["passenger_count"] > upper_limit,upper_limit,
                               np.where(data["passenger_count"] < lower_limit,lower_limit,data["passenger_count"] ))

data["passenger_count"].describe()

import plotly.express as px

fig=px.histogram(data,  x="fare_amount")
fig.show()

fig3 =px.scatter(x=data["passenger_count"],y=data["fare_amount"])
fig3.show()

"""So we can see that we have removed and reduced unevenly large or small outliers. The data is almost normally distrubuted and now can be further used for analysis.

"""

